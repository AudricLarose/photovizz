# -*- coding: utf-8 -*-
"""colorFinder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T2pAX9ombyZyZxsvwARubbY1R-2HJfyB
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.colors import ListedColormap
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout
from sklearn.preprocessing import OneHotEncoder
from keras.callbacks import EarlyStopping
import tensorflow as tf

df= pd.read_csv("colortable.csv",delimiter=" ")
df.head(3)

"""Graphique , comme on peu tle voir il y a une correlation entre les differentes couleurs mais c'est normal """

fig = plt.figure(figsize=(6,6))
ax = Axes3D(fig)
fig.add_axes(ax)
cmap = ListedColormap(sns.color_palette("husl", 256).as_hex())
sc = ax.scatter(df["Rouge"], df["Vert"], df["Bleu"], s=40, c=df["Rouge"], marker='o', cmap=cmap, alpha=1)

df.info()

plt.figure(figsize=(10,8))
sns.countplot(df["Couleur"])

df.dtypes

"""# Pas de valeur null visiblement """

df.isnull().values.any()

train,test=train_test_split(df)

from sklearn.utils import resample
def colorAdjuster(Couleur):
  df_majority= train[train.Couleur=="Vert"]
  df_minority= train[train.Couleur==Couleur]
  df_minority_upsampled = resample(df_minority,replace=True,n_samples=(df[df.Couleur=="Vert"].shape[0] - df[df.Couleur==Couleur].shape[0]),random_state=123)
  return df_minority_upsampled

df_orange=colorAdjuster("Orange")
df_jaune=colorAdjuster("Jaune")
df_rouge=colorAdjuster("Rouge")
df_rose=colorAdjuster("Rose")
df_gris=colorAdjuster("Gris")
df_cyan=colorAdjuster("Cyan")
df_bleu=colorAdjuster("Bleu")
df=df.append(df_orange, ignore_index = True)
df=df.append(df_jaune, ignore_index = True)
df=df.append(df_rouge, ignore_index = True)
df=df.append(df_gris, ignore_index = True)
df=df.append(df_bleu, ignore_index = True)
df=df.append(df_cyan, ignore_index = True)
df.isnull().values.any()

dff=pd.get_dummies(df)

dff.columns

X=dff[["Rouge","Vert","Bleu"]].values
y=dff.drop(["Rouge","Vert","Bleu"],axis=1).values
y.shape

X.shape

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

minmax=MinMaxScaler()
X_train=minmax.fit_transform(X_train)
X_test=minmax.transform(X_test)
X_train.shape

from sklearn import neighbors
from sklearn.neighbors import KNeighborsClassifier
kn=KNeighborsClassifier(n_neighbors=15)
kn.fit(X_train,y_train)
y_pred=kn.predict(X_test)

from gc import callbacks
model=Sequential()
model.add(Dense(units=30,activation="relu"))
model.add(Dropout(rate=0.5))
model.add(Dense(units=15,activation="relu"))
model.add(Dropout(rate=0.5))
model.add(Dense(11,activation='softmax'))
es=EarlyStopping(monitor='val_loss',mode="min",verbose=1,patience=25)
model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy']) #optimisation de la fonction cout

model.fit(x=X_train,y=y_train,epochs=600,validation_data=(X_test,y_test))



perte=pd.DataFrame(model.history.history)

perte.plot()

dff.columns

souhait=[[110,250, 155]]
Label=[["Blanc","Bleu","Cyan","Gris","Jaune","Marron","Orange","Rose","Rouge","Vert","Violet"]]
kn.predict(souhait)

#export_dir="name/tmp/model_color_finder"
#tf.saved_model.save(model,export_dir)

#converter=tf.lite.TFLiteConverter.from_saved_model(export_dir)
#tflite_model=converter.convert()

#with open ('model.tflite','wb') as f :
 # f.write(tflite_model)

import pickle
with open ('mol.pkl','wb') as f :
  pickle.dump(model,f)

odel=pickle.load(open('mol.pkl','rb'))
odel.predict(souhait)